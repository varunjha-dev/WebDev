import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

/*  
    ! ================================
    !  Async Thunk for Fetching Data
    ! ================================
*/

/* 
    * createAsyncThunk generates action types automatically:
    * {type: 'coin/fetch/pending' , payload: undefined}   -> When the request starts
    * {type: 'coin/fetch/fulfilled' , payload: data}      -> When the request is successful
    * {type: 'coin/fetch/rejected', payload: "error_message"}  -> When the request fails
*/

const FetchData = createAsyncThunk(
    // ? Action Type: 'Coin/fetch'
    'Coin/fetch',
    async (args, thunkAPI) => {
        try {
            // * Fetching cryptocurrency market data from CoinGecko API
            const response = await fetch(
                `https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=${args}`
            );
            const data = await response.json();
            return data; // * Returning fetched data
        } catch (error) {
            // * Handling errors
            return thunkAPI.rejectWithValue(error.message);
        }
    }
);

/*  
    ! ================================
    !  Redux Slice (State Management)
    ! ================================
*/

const slicer1 = createSlice({
    name: 'slice1',
    
    // * Initial State: Holds data, loading state, and error messages
    initialState: { data: [], loading: false, error: null },
    
    reducers: {},

    /*  
        * extraReducers:
        * - Handles async operations (pending, fulfilled, rejected)
        * - Builder is just an object that allows defining additional reducers
    */
    extraReducers: (builder) => {
        builder
            .addCase(FetchData.pending, (state) => {
                state.loading = true;  // * Set loading to true when API call starts
                state.error = null;    // * Reset error state
            })
            .addCase(FetchData.fulfilled, (state, action) => {
                state.data = action.payload;  // * Store the fetched data in state
                state.loading = false;       // * Set loading to false as request is completed
            })
            .addCase(FetchData.rejected, (state, action) => {
                state.error = action.payload; // * Store the error message
                state.loading = false;       // * Stop loading state
            });
    }
});

/*  
    ! ================================
    !  Action Types Generated by Redux
    ! ================================
*/

/* 
    ? Example action types this slice will generate:
    * {type: 'coin/fetch/pending' , payload: undefined} -> API call starts
    * {type: 'coin/fetch/fulfilled' , payload: data}   -> API call successful
    * {type: 'coin/fetch/rejected' , payload: error}  -> API call failed
*/

/* 
    ? Other action types (if reducers were added):
    * {type: 'slice1/Increment'}
    * {type: 'slice1/Decrement'}
*/

export default slicer1.reducer;
export { FetchData };
